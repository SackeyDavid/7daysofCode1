{
  "_args": [
    [
      {
        "raw": "idb",
        "scope": null,
        "escapedName": "idb",
        "name": "idb",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "C:\\xampp\\htdocs\\7daysofCode"
    ]
  ],
  "_from": "idb@latest",
  "_id": "idb@2.1.3",
  "_inCache": true,
  "_location": "/idb",
  "_nodeVersion": "10.2.1",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/idb_2.1.3_1529570855362_0.597023527753215"
  },
  "_npmUser": {
    "name": "jaffathecake",
    "email": "jaffathecake@gmail.com"
  },
  "_npmVersion": "5.6.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "idb",
    "scope": null,
    "escapedName": "idb",
    "name": "idb",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER"
  ],
  "_resolved": "https://registry.npmjs.org/idb/-/idb-2.1.3.tgz",
  "_shasum": "7b295fa1a46ab7851e42dd85543a271435f87fee",
  "_shrinkwrap": null,
  "_spec": "idb",
  "_where": "C:\\xampp\\htdocs\\7daysofCode",
  "author": {
    "name": "Jake Archibald"
  },
  "browser": "lib/idb.js",
  "bugs": {
    "url": "https://github.com/jakearchibald/indexeddb-promised/issues"
  },
  "dependencies": {},
  "description": "IndexedDB but with promises",
  "devDependencies": {
    "babelify": "^6.1.3",
    "browser-sync": "^2.8.2",
    "browserify": "^11.0.1",
    "del": "^1.2.0",
    "es6-promise": "^3.0.2",
    "gulp": "^3.9.0",
    "gulp-load-plugins": "^0.10.0",
    "gulp-size": "^1.2.3",
    "gulp-sourcemaps": "^1.5.2",
    "gulp-util": "^3.0.6",
    "merge-stream": "^0.1.8",
    "mocha": "^2.2.5",
    "run-sequence": "^1.1.2",
    "uglifyify": "^3.0.1",
    "vinyl-buffer": "^1.0.0",
    "vinyl-source-stream": "^1.1.0",
    "watchify": "^3.3.1"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-1He6QAuavrD38HCiJasi4lEEK87Y22ldFuM+ZHkp433n4Fd5jXjWKutClYFp8w4mgx3zgrjnWxL8dpjMzcQ+WQ==",
    "shasum": "7b295fa1a46ab7851e42dd85543a271435f87fee",
    "tarball": "https://registry.npmjs.org/idb/-/idb-2.1.3.tgz",
    "fileCount": 10,
    "unpackedSize": 194157,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJbK2YwCRA9TVsSAnZWagAADQsP/Aph1MFhEu5Hm0CUp3uI\nfepDCagezWNGMs4aWMfIztuGR6x/A+AsEy0+YzzCSHPeKQFw02heSi/wceKY\nwytmb33FvLIJ3EIdMiSCqCy+RATkVMx0t3tuQ/X1souTiNTwVgvLY1Qf72mM\nA38nwzzhJjBegTBq+HYHaaY6lt3CpUrCv+GGK26OzyhfRZcxoD2q+3axqb45\nuzHe1KR1HLARCe+snSNDymeGOiYye1nz+dKXmBx9Pd4INDe4KKdyVUy5NAHy\nQzGrKf0L9UM/bm7FCc5vui9e+b6LiGxL5wWjukHVlAnoUXv1su7AQfU5emhP\ntPsGleIlk33NuY4xeYua4zANSQBfwyVmOnpqy7CIb3Ugyz9+TK69I930+oOu\nLufanF7W5DhVAiO9mQNUg2Yy/hxuEBBzuUvtAMELHGKVDeahTWYghLAausV8\nmJfgPxTc7uFSbDpyFHAIwdtvF29yJkbJkMJezFshgR6P8CIR2BS19/2TTPGF\nWiMGaITssVNiVnjncYycVS6ud9DLfTL2tRncEOVEq2aER6dM2unViqQk0Dq1\nNYAXrrd7e33v2QfFpY+XPBFhKBct7l9M1EfdqMkiPdjqATBH1reDdArApdc+\nSSwDxZQvFwAZhIlZG6RR5Qyk7N776YOk3zpMho3m+6AWWtv1EJK3wG701eZT\n/xbL\r\n=Sb5t\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "gitHead": "b8c8b16cdc6f94c6235fd98ed695a971edffb7c9",
  "homepage": "https://github.com/jakearchibald/indexeddb-promised#readme",
  "license": "ISC",
  "main": "lib/node.js",
  "maintainers": [
    {
      "name": "jaffathecake",
      "email": "jaffathecake@gmail.com"
    }
  ],
  "name": "idb",
  "optionalDependencies": {},
  "readme": "# IndexedDB Promised\n\nThis is a tiny library that mirrors IndexedDB, but replaces the weird `IDBRequest` objects with promises, plus a couple of other small changes.\n\n# Installation\n\nIf you're using Rollup/Webpack or similar:\n\n```sh\nnpm install idb\n```\n\nThen in your JS:\n\n```js\nimport idb from 'idb';\n\nawait idb.open(…);\n```\n\nOr include [the script](https://github.com/jakearchibald/idb/blob/master/lib/idb.js) as it is, and `idb` will exist on the global scope.\n\n# Examples\n\n## Keyval Store\n\nThis is very similar to `localStorage`, but async. If this is *all* you need, you may be interested in [idb-keyval](https://www.npmjs.com/package/idb-keyval), you can always upgrade to this library later.\n\n```js\nconst dbPromise = idb.open('keyval-store', 1, upgradeDB => {\n  upgradeDB.createObjectStore('keyval');\n});\n\nconst idbKeyval = {\n  get(key) {\n    return dbPromise.then(db => {\n      return db.transaction('keyval')\n        .objectStore('keyval').get(key);\n    });\n  },\n  set(key, val) {\n    return dbPromise.then(db => {\n      const tx = db.transaction('keyval', 'readwrite');\n      tx.objectStore('keyval').put(val, key);\n      return tx.complete;\n    });\n  },\n  delete(key) {\n    return dbPromise.then(db => {\n      const tx = db.transaction('keyval', 'readwrite');\n      tx.objectStore('keyval').delete(key);\n      return tx.complete;\n    });\n  },\n  clear() {\n    return dbPromise.then(db => {\n      const tx = db.transaction('keyval', 'readwrite');\n      tx.objectStore('keyval').clear();\n      return tx.complete;\n    });\n  },\n  keys() {\n    return dbPromise.then(db => {\n      const tx = db.transaction('keyval');\n      const keys = [];\n      const store = tx.objectStore('keyval');\n\n      // This would be store.getAllKeys(), but it isn't supported by Edge or Safari.\n      // openKeyCursor isn't supported by Safari, so we fall back\n      (store.iterateKeyCursor || store.iterateCursor).call(store, cursor => {\n        if (!cursor) return;\n        keys.push(cursor.key);\n        cursor.continue();\n      });\n\n      return tx.complete.then(() => keys);\n    });\n  }\n};\n```\n\n### Usage\n\n```js\nkeyValStore.set('foo', {hello: 'world'});\n\n// logs: {hello: 'world'}\nkeyValStore.get('foo').then(val => console.log(val));\n```\n\n## Set of objects\n\nImagine we had a set of objects like…\n\n```json\n{\n  \"id\": 123456,\n  \"data\": {\"foo\": \"bar\"}\n}\n```\n\n### Upgrading existing DB\n\n```js\nconst dbPromise = idb.open('keyval-store', 2, upgradeDB => {\n  // Note: we don't use 'break' in this switch statement,\n  // the fall-through behaviour is what we want.\n  switch (upgradeDB.oldVersion) {\n    case 0:\n      upgradeDB.createObjectStore('keyval');\n    case 1:\n      upgradeDB.createObjectStore('objs', {keyPath: 'id'});\n  }\n});\n```\n\n### Adding\n\n```js\ndbPromise.then(db => {\n  const tx = db.transaction('objs', 'readwrite');\n  tx.objectStore('objs').put({\n    id: 123456,\n    data: {foo: \"bar\"}\n  });\n  return tx.complete;\n});\n```\n\n### Getting all\n\n```js\ndbPromise.then(db => {\n  return db.transaction('objs')\n    .objectStore('objs').getAll();\n}).then(allObjs => console.log(allObjs));\n```\n\n### Getting by ID\n\n```js\ndbPromise.then(db => {\n  return db.transaction('objs')\n    .objectStore('objs').get(123456);\n}).then(obj => console.log(obj));\n```\n\n# Limitations\n\n## Transaction lifetime\n\nAn IDB transaction will auto-close if it doesn't have anything to do once microtasks have been processed. As a result, this works fine:\n\n```js\ndbPromise.then(async db => {\n  const tx = db.transaction('keyval', 'readwrite');\n  const store = tx.objectStore('keyval');\n  const val = await store.get('counter') || 0;\n  store.put(val + 1, 'counter');\n  return tx.complete;\n});\n```\n\nBut this doesn't:\n\n```js\ndbPromise.then(async db => {\n  const tx = db.transaction('keyval', 'readwrite');\n  const store = tx.objectStore('keyval');\n  const val = await store.get('counter') || 0;\n  // The transaction will auto-close while the fetch is in-progress\n  const newVal = await fetch('/increment?val=' + val)\n  store.put(newVal, 'counter');\n  return tx.complete;\n});\n```\n\n## Promise issues in older browsers\n\nSome older browsers don't handle promises properly, which causes issues if you do more than one thing in a transaction:\n\n```js\ndbPromise.then(async db => {\n  const tx = db.transaction('keyval', 'readwrite');\n  const store = tx.objectStore('keyval');\n  const val = await store.get('counter') || 0;\n  // In some older browsers, the transaction closes here.\n  // Meaning this next line fails:\n  store.put(val + 1, 'counter');\n  return tx.complete;\n});\n```\n\nAll modern browsers have fixed this. [Test your browser](https://simple-idb-demo.glitch.me/microtask-issue.html).\n\nYou can work around this in some versions of Firefox by using a promise polyfill that correctly uses microtasks, such as [es6-promise](https://github.com/jakearchibald/es6-promise).\n\n# API\n\n## `idb`\n\nThis is your entry point to the API. It's exposed to the global scope unless you're using a module system such as browserify, in which case it's the exported object.\n\n### `idb.open(name, version, upgradeCallback)`\n\nThis method returns a promise that resolves to a `DB`.\n\n`name` and `version` behave as they do in `indexedDB.open`.\n\n`upgradeCallback` is called if `version` is greater than the version last opened. It's similar to IDB's `onupgradeneeded`. The callback receives an instance of `UpgradeDB`.\n\n```js\nidb.open('keyval-store', 2, upgradeDB => {\n  // Note: we don't use 'break' in this switch statement,\n  // the fall-through behaviour is what we want.\n  switch (upgradeDB.oldVersion) {\n    case 0:\n      upgradeDB.createObjectStore('keyval');\n    case 1:\n      upgradeDB.createObjectStore('stuff', {keyPath: ''});\n  }\n}).then(db => console.log(\"DB opened!\", db));\n```\n\n### `idb.delete(name)`\n\nBehaves like `indexedDB.deleteDatabase`, but returns a promise.\n\n```js\nidb.delete('keyval-store').then(() => console.log('done!'));\n```\n\n## `DB`\n\nProperties:\n\n* Same as equivalent properties on an instance of `IDBDatabase`:\n  * `name`\n  * `version`\n  * `objectStoreNames`\n\nMethods:\n\n* `close` - as `idbDatabase.close`\n* `transaction` - as `idbDatabase.transaction`, but returns a `Transaction`\n\n## `UpgradeDB`\n\nAs `DB`, except:\n\nProperties:\n\n* `transaction` - this is a property rather than a method. It's a `Transaction` representing the upgrade transaction\n* `oldVersion` - the previous version of the DB seen by the browser, or 0 if it's new\n\nMethods:\n\n* `createObjectStore` - as `idbDatabase.createObjectStore`, but returns an `ObjectStore`\n* `deleteObjectStore` - as `idbDatabase.deleteObjectStore`\n\n## `Transaction`\n\nProperties:\n\n* `complete` - a promise. Resolves when transaction completes, rejects if transaction aborts or errors\n* Same as equivalent properties on an instance of `IDBTransaction`:\n  * `objectStoreNames`\n  * `mode`\n\nMethods:\n\n* `abort` - as `idbTransaction.abort`\n* `objectStore` - as `idbTransaction.objectStore`, but returns an `ObjectStore`\n\n```js\nidb.open('keyval-store', 1, upgradeDB => {\n  switch (upgradeDB.oldVersion) {\n    case 0:\n      upgradeDB.createObjectStore('keyval');\n  }\n}).then(db => {\n  const tx = db.transaction('keyval', 'readwrite');\n  tx.objectStore('keyval').put('hello', 'world');\n  return tx.complete;\n}).then(() => console.log(\"Done!\"));\n```\n\n## `ObjectStore`\n\nProperties:\n\n* Same as equivalent properties on an instance of `IDBObjectStore`:\n  * `name`\n  * `keyPath`\n  * `indexNames`\n  * `autoIncrement`\n\nMethods:\n\n* Same as equivalent methods on an instance of `IDBObjectStore`, but returns a promise that resolves/rejects based on operation success/failure:\n  * `put`\n  * `add`\n  * `delete`\n  * `clear`\n  * `get`\n  * `getAll`\n  * `getAllKeys`\n  * `count`\n* Same as equivalent methods on an instance of `IDBObjectStore`, but returns a promise that resolves with a `Cursor`:\n  * `openCursor`\n  * `openKeyCursor`\n* `deleteIndex` - as `idbObjectStore.deleteIndex`\n* Same as equivalent methods on an instance of `IDBObjectStore`, but returns an `Index`:\n  * `createIndex`\n  * `index`\n* `iterateCursor` - see below\n* `iterateKeyCursor` - see below\n\n\n### `iterateCursor` & `iterateKeyCursor`\n\nDue to the microtask issues in some browsers, iterating over a cursor using promises doesn't always work:\n\n```js\nconst tx = db.transaction('stuff');\ntx.objectStore('stuff').openCursor().then(function cursorIterate(cursor) {\n  if (!cursor) return;\n  console.log(cursor.value);\n  return cursor.continue().then(cursorIterate);\n});\ntx.complete.then(() => console.log('done'));\n```\n\nSo in the mean time, `iterateCursor` and `iterateKeyCursor` map to `openCursor` & `openKeyCursor`, take identical arguments, plus an additional callback that receives an `IDBCursor`, so the above example becomes:\n\n```js\nconst tx = db.transaction('stuff');\ntx.objectStore('stuff').iterateCursor(cursor => {\n  if (!cursor) return;\n  console.log(cursor.value);\n  cursor.continue();\n});\ntx.complete.then(() => console.log('done'));\n```\n\nThe intent is to remove `iterateCursor` and `iterateKeyCursor` from the library once browsers support promises and microtasks correctly.\n\n## `Index`\n\nProperties:\n\n* Same as equivalent properties on an instance of `IDBIndex`:\n  * `name`\n  * `keyPath`\n  * `multiEntry`\n  * `unique`\n\nMethods:\n\n* Same as equivalent methods on an instance of `IDBIndex`, but returns a promise that resolves/rejects based on operation success/failure:\n  * `get`\n  * `getKey`\n  * `getAll`\n  * `getAllKeys`\n  * `count`\n* Same as equivalent methods on an instance of `IDBIndex`, but returns a promise that resolves with a `Cursor`:\n  * `openCursor`\n  * `openKeyCursor`\n* `iterateCursor` - as `objectStore.iterateCursor` but over the index\n* `iterateKeyCursor` - as `objectStore.iterateKeyCursor` but over the index\n\n## Cursor\n\nProperties:\n\n* Same as equivalent properties on an instance of `IDBCursor`:\n  * `direction`\n  * `key`\n  * `primaryKey`\n  * `value`\n\nMethods:\n\n* Same as equivalent methods on an instance of `IDBCursor`, but returns a promise that resolves/rejects based on operation success/failure:\n  * `update`\n  * `delete`\n* Same as equivalent methods on an instance of `IDBCursor`, but returns a promise that resolves with a `Cursor`:\n  * `advance`\n  * `continue`\n  * `continuePrimaryKey`\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/jakearchibald/indexeddb-promised.git"
  },
  "scripts": {
    "serve": "gulp serve",
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "typings": "lib/idb.d.ts",
  "version": "2.1.3"
}
